<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unknot on Unknot</title>
    <link>https://mauriciogtec.github.io/</link>
    <description>Recent content in Unknot on Unknot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 -0500</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reinforcement Learning Reading List</title>
      <link>https://mauriciogtec.github.io/post/rl-reading-list/</link>
      <pubDate>Sat, 24 Nov 2018 11:11:35 -0600</pubDate>
      
      <guid>https://mauriciogtec.github.io/post/rl-reading-list/</guid>
      <description>

&lt;p&gt;Here&amp;rsquo;s a list to Reinforcement Learning ideas and papers. It is mostly for personal research, as part of my work as PhD student at the University of Texas at Austin.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Course: Research Elective Fall 2019&lt;/li&gt;
&lt;li&gt;Advisor: Prof. Stephen G. Walker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This is not an extensive literature review, but a broad overview to guide our research, with the specific goal of exploring and extracting the statistical and probabilistic ideas and areas of opportunity in reinforcement learning literature.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;key-concepts&#34;&gt;Key concepts&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Multi-armed Bandits&lt;/strong&gt;: It is the most elementary problem of Reinforcement Learning, and the building block of many algorithms for more complex problems.&lt;/p&gt;

&lt;p&gt;We start with random variables $X_1, &amp;hellip;, X_K$ representing the rewards of $K$ possible actions, and we have to decide a sampling strategy so that we maximize the &lt;em&gt;total reward&lt;/em&gt; over time. Basically, we are interested in $\max(X_1, &amp;hellip;, X_K)$. We start with no data&amp;ndash;no smart decision available&amp;ndash;and at each turn, we must select one of the $X_i$ from which to sample (or one bandit arm, as in casino machines).&lt;/p&gt;

&lt;p&gt;The reward up to time $T$ is $R_T = \sum_{t=1}^T X_t$. Naively, we could sample each arm several times and then select the arm whose sample has the highest mean; however, the idea is to learn quickly and reach high values as soon as possible.&lt;/p&gt;

&lt;p&gt;The simplest version of the problem assumes that the $X_i$ are independent, and it is already an interesting problem.&lt;/p&gt;

&lt;p&gt;The first idea developed in this direction was &lt;a href=&#34;https://en.wikipedia.org/wiki/Thompson_sampling&#34; target=&#34;_blank&#34;&gt;Thompson Sampling&lt;/a&gt; (1933), which boils down to Bayesian inference. We begin by putting a prior belief over the distribution of each $X_i$ (usually uniform), and at each step we update our posterior belief of the selected arm with the observed value obtained after selecting it. The selection rule is to choose arm $i$ proportionally to our belief of how much its reward is higher than those of the other arms. The usual approach is to simulate a sample from each posterior distribution, and choose the arm whose simulation had the highest sampled value. The simplest version of the algorithm uses a Beta-Bernoulli conjugate model. Gaussian Processes are also used for more complicated tasks.&lt;/p&gt;

&lt;p&gt;Although the idea of Thompson sampling is very old, it remains an active area of research. For example, &lt;a href=&#34;https://papers.nips.cc/paper/4321-an-empirical-evaluation-of-thompson-sampling.pdf&#34; target=&#34;_blank&#34;&gt;Chappelle &amp;amp; Li&lt;/a&gt; (2011) compare multiple strategies and improvements over Thompson Sampling, it also discusses its optimality.&lt;/p&gt;

&lt;p&gt;Another considerable part of the literature centers around the idea of minimizing the expected &lt;em&gt;regret&lt;/em&gt; of a strategy $\pi$ up to time $T$, defined as&lt;/p&gt;

&lt;p&gt;$$ T\mu_*  - \sum_{t=1}^T \mu_{\pi(t)} $$&lt;/p&gt;

&lt;p&gt;where $\mu_* = \max_i E(X_i)$, and $\mu_{\pi(t)}$ is the mean of the random variable chosen at time $t$ by the sampling strategy $\pi$. The idea of regret was introduced by &lt;a href=&#34;sdfsd&#34; target=&#34;_blank&#34;&gt;Lai and Robbins&lt;/a&gt; (1985). A recent highly-cited survey is &lt;a href=&#34;sdfsdf&#34; target=&#34;_blank&#34;&gt;(Bubeck &amp;amp; Bianchi, 2012)&lt;/a&gt;. Not suprisingly, the analysis techniques rely on probability concentration inequalities. For example, an application of Hoeffding&amp;rsquo;s inequality leads to the so-called &lt;em&gt;upper confidence bound&lt;/em&gt; (UCB) rule, namely,
$$
\pi(t) = \mathrm{argmax}_i \; \hat{\mu}_i + \sqrt{\frac{2\log t}{n_i}}
$$&lt;/p&gt;

&lt;p&gt;where $\hat{\mu}_i$ is the empirical mean of the samples from arm $i$, and $n_i$ is the number of times arm $i$ has been sampled. The second term appearing in this rule takes into account uncertainty and encourages exploration of less frequently selected actions. The contrast is evident: while the Bayesian approach (Thompson sampling) deals with uncertainty via the probability laws of posterior Bayesian inference, the UCB approach uses concentration inequalities. This contraposition is also a common theme in Theoretical Statistics. A common variation to the second term is to multiply it by a by a constant, in an attempt to increase or decrease the effects of uncertainty.&lt;/p&gt;

&lt;p&gt;Both Thompson Sampling and UCB provide a solution to the dilemma of &lt;em&gt;exploitation&lt;/em&gt; &lt;em&gt;vs&lt;/em&gt; &lt;em&gt;exploration&lt;/em&gt;. A simplest approach is to only choose the arm with the highest $\hat{\mu}$, except with a probability $\epsilon$, in which case we choose completely at random. Most of the time, this $\epsilon$-greedy strategy is usually an underperformer. Also $\epsilon$ should ogo to zero eventually, but it is hard to know at which speed it is convenient.&lt;/p&gt;

&lt;p&gt;A recent must-read reference is &lt;a href=&#34;blabla&#34; target=&#34;_blank&#34;&gt;Riquelme et al&lt;/a&gt; (2018), which discusses Deep Bayesian Bandits. Here, the $X_i$ are not independent and $K$ is very large. In fact, the input space can be treated as a continuous space. Essentially, what deep neural networks do is find common patterns in the input space and effectively reduce $K$. Multi-armed bandit problems are building blocks for more complicated tasks, where often it is necessary to learn from images or other complex data.&lt;/p&gt;

&lt;p&gt;Several variants of the multi-armed bandit problem exist. One direction is to add additional structure; for a recent survey and state-of-the-art approach we have &lt;a href=&#34;combes&#34; target=&#34;_blank&#34;&gt;Combes et al&lt;/a&gt; (2017). Another direction is to assume that the $X_i$ change over time, the so-called non-stationary bandits. This is a hard problem, and current approaches can be improved, both theoretically and pragmatically (&lt;em&gt;c.f.&lt;/em&gt; &lt;a href=&#34;besbes&#34; target=&#34;_blank&#34;&gt;Besbes et al&lt;/a&gt; (2014) and &lt;a href=&#34;wu&#34; target=&#34;_blank&#34;&gt;Wu et al&lt;/a&gt; (2018)).&lt;/p&gt;

&lt;p&gt;A natural question is to ask if the principles of multi-armed bandit can be applied to model selection and hyper-parameter tuning in statistics. This technique is known as &lt;em&gt;Bayesian optimization&lt;/em&gt; and is also an active area of research. For a recent survey, we can consult &lt;a href=&#34;https://ieeexplore.ieee.org/document/7352306&#34; target=&#34;_blank&#34;&gt;Shahriari et al&lt;/a&gt; (2016).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reinforcement Learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MonteCarlo Tree Search&lt;/strong&gt; (MCTS). The multi-armed bandit approach applies to problems where the set of possible choices remains constant. In many situations, the action set depends on previous decisions, as well as chance. MCTS is used for repeated playouts, where tasks yield a reward only when they are completed. This is a common situation in games. MCTS has been a key tool in developing computer programs capable of defeating master players of Backgammon, Chess or Go.&lt;/p&gt;

&lt;p&gt;The idea is simple:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep reinforcement learning&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;web&#34;&gt;Web&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[&lt;a href=&#34;https://spinningup.openai.com](&#34; target=&#34;_blank&#34;&gt;https://spinningup.openai.com](&lt;/a&gt;) : It contains&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reading-list&#34;&gt;Reading list&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13_&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14_&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Chapelle &amp;amp; Li An Empirical Evaluation of Thompson Sampling&lt;/li&gt;
&lt;li&gt;Shahriari&lt;/li&gt;
&lt;li&gt;Thompson, William R. &amp;ldquo;On the likelihood that one unknown probability exceeds another in view of the evidence of two samples&amp;rdquo;. Biometrika, 25(3–4):285–294, 1933.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;oneday&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;Download this as bibtex&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use YAML!</title>
      <link>https://mauriciogtec.github.io/post/use-yaml/</link>
      <pubDate>Tue, 11 Sep 2018 14:14:07 -0500</pubDate>
      
      <guid>https://mauriciogtec.github.io/post/use-yaml/</guid>
      <description>

&lt;p&gt;A common issue when starting a new project involving data is choosing a format in which to store the data.&lt;/p&gt;

&lt;p&gt;The answer to the question of course depends on several aspects: the sources, the data types, the purpose, and its relational structure.&lt;/p&gt;

&lt;p&gt;While modern approaches in Big Data endorse the strategy of first extracting high volumes of raw data and worry about processing later; in here we shall be concerned with the opposite case, when data has to be captured manually by a human team, and we don&amp;rsquo;t want to spend hours later trying to make it amenable for the computer to read.&lt;/p&gt;

&lt;p&gt;You are probably familiar with CSVs, because you can create CSVs in Excel, which makes them quite handy. However, they are mainly useful for highly structured data having a fixed known number of columns per record.&lt;/p&gt;

&lt;p&gt;I want to present a basic introduction to YAML (yet-another-markup-language), a simple approach to keeping data records. It&amp;rsquo;s advantages are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it is machine-readable&lt;/li&gt;
&lt;li&gt;it is human-readable&lt;/li&gt;
&lt;li&gt;ergo, human-writable too&lt;/li&gt;
&lt;li&gt;used widely nowadays&lt;/li&gt;
&lt;li&gt;can be transformed to other common data serialization formats such as JSON&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my example I will use Python to &amp;lsquo;parse&amp;rsquo; the YAML format. The idea is to show by example how a file stored in this format is readable by the machine.&lt;/p&gt;

&lt;p&gt;Our task is to use YAML to serialize, records of annotated bibliography. Note that there are other forms recording bibliography, such bibtex, but I claim that YAML requires much less effort.&lt;/p&gt;

&lt;h2 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h2&gt;

&lt;p&gt;Below are the contents of a simple YAML file named &lt;code&gt;example1.yaml&lt;/code&gt;. This is a textfile, pretty much like a file ending with &lt;code&gt;.txt&lt;/code&gt; which you have most likely used before and opened with the Notepad if you are a Windows user. This file can also be opened with the Notepad, but it ends with &lt;code&gt;.yaml&lt;/code&gt; instead of &lt;code&gt;.txt&lt;/code&gt;. Note that the colors are not part of the file, but of the display engine we are using here.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# filename: example1.yaml
# description: a simple yaml for annotated bibliography
id: &amp;quot;1,000Days_2018_What_We&#39;re_Watching_in_Congress&amp;quot; 
added_by: &amp;quot;John Doe&amp;quot;
title: &amp;quot;Congress is Back in Session: Here&#39;s What We&#39;re Watching&amp;quot;
author:  &amp;quot;1,000 Days&amp;quot;
publisher: &amp;quot;https://thousanddays.org/congress-is-back-in-session-heres-what-were-watching/&amp;quot;
publisher_type: &amp;quot;website&amp;quot; 
date: 2018-06-05 
accessed: 2018-09-08
keywords: 
  - &amp;quot;Congress&amp;quot;
  - &amp;quot;Farm Bill&amp;quot;
  - &amp;quot;Supplemental Nutrition Assistance Program&amp;quot;
  - &amp;quot;SNAP&amp;quot;
  - &amp;quot;The Special Supplemental Nutrition Program for Women&amp;quot;
  - &amp;quot;Infants and Children&amp;quot;
  - &amp;quot;WIC, 2020-2025 Dietary Guidelines for Americans&amp;quot;
  - &amp;quot;DGAs, Maternal Mortality&amp;quot;
  - &amp;quot;Children&#39;s Health Insurance Program&amp;quot;
  - &amp;quot;CHIP, Medicaid&amp;quot;
  - &amp;quot;public charge&amp;quot;
summary: |
  This webpage produced by the advocacy group 1,000 Days provides a summary of Congressional items that the group is keeping an eye on during the summer of 2018. These items are:
  1)     Changes to SNAP in the Farm Bill
  a.    House of Representatives put forth a Farm Bill with significant reduction to SNAP that would reduce food security for low-income families in the US. The Senate has a more balanced bill that is set to be marked up on June 13
  2)     Funding for WIC
  a.    WIC is funded through the annual appropriation process. Both House and Senate appropriation bills include less FY19 WIC funding than FY18. Breastfeeding peer counselor funding in both bills remains at $60 million. 
  3)     New Dietary Guidelines
  a.    House and Senate support funding of $12.3 million to USDA to develop DGAs. 
  4)     Maternal Mortality Legislation
  a.    Both House and Senate have members who are introducing legislation on addressing high rates of maternal mortality in the US. The legislation will also focus on racial and ethnic disparities in maternal mortality rates in the US.
  5)     Proposed Cuts to CHIP
  a.    Trump has threatened to rescind $7 billion of funding to CHIP that was signed into law and passed by both the Senate and House. 
  6)     Threats to Immigrant Families
  a.    Public Charge, a proposed Dept. of Homeland Security rule that would limit immigrant access to benefits such as WIC and Medicaid is currently pending review.

advocacy_facts: |
  In 2013, Congress mandated that the United States Department of Agriculture (USDA) and the United States Department of Health and Human Services (HHS) include pregnant women and young children as part of the 2020-2025 Dietary Guidelines for Americans (DGAs). The updated DGAs will inform federal nutrition programs that reach young children and their families, as well as serve as an important reference point for physicians, nutrition counselors, early childcare providers, among others.  – 1,000 Days

additional_sources: 
  - &#39;https://thousanddays.org/draft-house-farm-bill-will-harm-families-and-children/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now show Python code that reads the above file&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import yaml # library for YAML support in python
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;example1.yaml&amp;quot;, &amp;quot;r&amp;quot;) as file:
    record = yaml.load(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(record[&#39;id&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;1,000Days_2018_What_We&#39;re_Watching_in_Congress
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(record[&#39;title&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;Congress is Back in Session: Here&#39;s What We&#39;re Watching
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(record[&#39;keywords&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[&#39;Congress&#39;, &#39;Farm Bill&#39;, &#39;Supplemental Nutrition Assistance Program&#39;, &#39;SNAP&#39;, &#39;The Special Supplemental Nutrition Program for Women&#39;, &#39;Infants and Children&#39;, &#39;WIC, 2020-2025 Dietary Guidelines for Americans&#39;, &#39;DGAs, Maternal Mortality&#39;, &amp;quot;Children&#39;s Health Insurance Program&amp;quot;, &#39;CHIP, Medicaid&#39;, &#39;public charge&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(record[&#39;summary&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;This webpage produced by the advocacy group 1,000 Days provides a summary of Congressional items that the group is keeping an eye on during the summer of 2018. These items are:
1)     Changes to SNAP in the Farm Bill
a.    House of Representatives put forth a Farm Bill with significant reduction to SNAP that would reduce food security for low-income families in the US. The Senate has a more balanced bill that is set to be marked up on June 13
2)     Funding for WIC
a.    WIC is funded through the annual appropriation process. Both House and Senate appropriation bills include less FY19 WIC funding than FY18. Breastfeeding peer counselor funding in both bills remains at $60 million. 
3)     New Dietary Guidelines
a.    House and Senate support funding of $12.3 million to USDA to develop DGAs. 
4)     Maternal Mortality Legislation
a.    Both House and Senate have members who are introducing legislation on addressing high rates of maternal mortality in the US. The legislation will also focus on racial and ethnic disparities in maternal mortality rates in the US.
5)     Proposed Cuts to CHIP
a.    Trump has threatened to rescind $7 billion of funding to CHIP that was signed into law and passed by both the Senate and House. 
6)     Threats to Immigrant Families
a.    Public Charge, a proposed Dept. of Homeland Security rule that would limit immigrant access to benefits such as WIC and Medicaid is currently pending review.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;record[&#39;date&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;datetime.date(2018, 6, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;record[&#39;date&#39;].year
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;2018
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;There are the things that can be input in a YAML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;&lt;em&gt;key: value&lt;/em&gt;&amp;rdquo; pairs&lt;/li&gt;
&lt;li&gt;&lt;em&gt;lists&lt;/em&gt;: denoted with brackets &lt;code&gt;[x1, x2, ..., xn]&lt;/code&gt; or with indented dashes as &lt;code&gt;keywords&lt;/code&gt; in the previous example.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;value&lt;/em&gt; can be atomic such as strings, numbers or dates, or it can be a list of these atomic elements, or even a list of &amp;ldquo;key: value&amp;rdquo; pairs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a computer program such as Python reads YAML it maps each value to the correct type.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note about keys&lt;/strong&gt;: A good citizenship practice is too &lt;strong&gt;NEVER&lt;/strong&gt;:
- start with symbols or numbers
- include white spaces&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# filename: example2.yml
# description: example for data types
# comments are indicated  with pounds and ignored by compiler
anumber: 2
anothernumber: 3.1416
astring: &amp;quot;hello, world!&amp;quot;
anotherstring: noproblemhere # if there aren&#39;t spaces it works without quotation marks
adate: 2018-09-11 # yyyy-mm-dd best format!
alist:
  - these
  - is
  - a
  - list
  - with 
  - name
anotherlist = [&#39;can&#39;, &#39;use&#39;, &#39;brackets&#39;]
adict: # watch the indentation!
  key1: value1
  key2: value2
  key3:
    - value31
    - value32
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;example2.yaml&amp;quot;, &amp;quot;r&amp;quot;) as file:
    record2 = yaml.load(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;display(record2)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;{&#39;anumber&#39;: 2,
    &#39;anothernumber&#39;: 3.1416,
    &#39;astring&#39;: &#39;hello, world!&#39;,
    &#39;anotherstring&#39;: &#39;noproblemhere&#39;,
    &#39;adate&#39;: datetime.date(2018, 9, 11),
    &#39;alist&#39;: [&#39;these&#39;, &#39;is&#39;, &#39;a&#39;, &#39;list&#39;, &#39;with&#39;, &#39;name&#39;],
    &#39;anotherlist&#39;: [&#39;can&#39;, &#39;use&#39;, &#39;brackets&#39;],
    &#39;adict&#39;: {&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;, &#39;key3&#39;: [&#39;value31&#39;, &#39;value32&#39;]}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s the data types that Python assigns to the read objects.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for key, val in record2.items():
    print(key, &amp;quot;has data type: &amp;quot;, type(val))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;anumber has data type:  &amp;lt;class &#39;int&#39;&amp;gt;
anothernumber has data type:  &amp;lt;class &#39;float&#39;&amp;gt;
astring has data type:  &amp;lt;class &#39;str&#39;&amp;gt;
anotherstring has data type:  &amp;lt;class &#39;str&#39;&amp;gt;
adate has data type:  &amp;lt;class &#39;datetime.date&#39;&amp;gt;
alist has data type:  &amp;lt;class &#39;list&#39;&amp;gt;
anotherlist has data type:  &amp;lt;class &#39;list&#39;&amp;gt;
adict has data type:  &amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;multiline-strings&#34;&gt;Multiline strings&lt;/h2&gt;

&lt;p&gt;There are two ways to deal with long texts. Collapsing lines, when the text is really a long line or paragraph&amp;rsquo;, or respecting format. Here is an example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# filename: example3.yml
# description: long strings
include_newlines: |
  exactly as you see
  will appear these three
  lines of poetry
fold_newlines: &amp;gt;
  this is really a
  single line of text
  despite appearances
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;example3.yaml&amp;quot;, &amp;quot;r&amp;quot;) as file:
    longstrings = yaml.load(file)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(longstrings[&#39;include_newlines&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;exactly as you see
will appear these three
lines of poetry
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(longstrings[&#39;fold_newlines&#39;])
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;this is really a single line of text despite appearances
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;more-than-one-record-per-file&#34;&gt;More than one record per file&lt;/h3&gt;

&lt;p&gt;For some applications it can be useful to have one big file for different records. That&amp;rsquo;s no problem for YAML. Just separate them with &lt;code&gt;---&lt;/code&gt; lines.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# filename: example4.yml
# description: a multi-record YAML
# starts record 1
key11: value11
key12: value12
---
# starts record 2
key21: value21
key22: value22
# no need to add ---- again
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;example4.yaml&amp;quot;, &amp;quot;r&amp;quot;) as file:
    multirecords = yaml.load_all(file)
    for i, record in enumerate(multirecords):
        print(&amp;quot;This is record&amp;quot;, i + 1)
        display(record)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;This is record 1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;{&#39;key11&#39;: &#39;value11&#39;, &#39;key12&#39;: &#39;value12&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;This is record 2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;{&#39;key21&#39;: &#39;value21&#39;, &#39;key22&#39;: &#39;value22&#39;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;what-can-we-do-with-yaml&#34;&gt;What can we do with YAML?&lt;/h2&gt;

&lt;p&gt;This is a broad question, since there&amp;rsquo;s a million things you can do with a database. However here&amp;rsquo;s a quick example using Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# filename: example5.yml
# description: a multi-record YAML for topic queries
id: 1
topics: [&#39;sports&#39;, &#39;war&#39;]
---
id: 2
topics: [&#39;sports&#39;, &#39;war&#39;]
---
id: 3 
topics: [&#39;food&#39;, &#39;war&#39;]
---
id: 4 
topics: [&#39;sports&#39;, &#39;beauty&#39;, &#39;art&#39;]
---
id: 5 
topics: [&#39;art&#39;, &#39;war&#39;]
---
id: 6
topics: [&#39;literature&#39;]
---
id: 7 
topics: [&#39;sports&#39;, &#39;art&#39;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;with open(&amp;quot;example5.yaml&amp;quot;, &amp;quot;r&amp;quot;) as file:
    records = list(yaml.load_all(file))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Suppose that we want to know what id&amp;rsquo;s are associated with the topic &lt;code&gt;sports&lt;/code&gt;. Then we can use Python to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[rec[&#39;id&#39;] for rec in records if &#39;sports&#39; in rec[&#39;topics&#39;]] # find record id&#39;s that have topic sports
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-nohighlight&#34;&gt;[1, 2, 4, 7]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;learn-more&#34;&gt;Learn more&lt;/h2&gt;

&lt;p&gt;There isn&amp;rsquo;t much science to YAML. Most of the time what we learned is enough. But to learn more you can check the official documentation and this &lt;a href=&#34;http://yaml.org/refcard.html&#34; target=&#34;_blank&#34;&gt;reference card&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;practice&#34;&gt;Practice&lt;/h2&gt;

&lt;p&gt;A great option for checking quickly if your YAML syntax is correct, is to use an online parser like this one: &lt;a href=&#34;http://yaml-online-parser.appspot.com/&#34; target=&#34;_blank&#34;&gt;yaml-online-parser.appspot.com&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Julia Package: Adaptive Rejection Sampling</title>
      <link>https://mauriciogtec.github.io/project/adaptive-rejection-sampling/</link>
      <pubDate>Wed, 08 Aug 2018 13:23:42 -0500</pubDate>
      
      <guid>https://mauriciogtec.github.io/project/adaptive-rejection-sampling/</guid>
      <description>&lt;p&gt;AdaptiveRejectionSampling&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>R package: Non-parametric Density Estimation with Particle Learning</title>
      <link>https://mauriciogtec.github.io/project/pldensity/</link>
      <pubDate>Wed, 08 Aug 2018 13:23:42 -0500</pubDate>
      
      <guid>https://mauriciogtec.github.io/project/pldensity/</guid>
      <description></description>
    </item>
    
    <item>
      <title>The Beginning</title>
      <link>https://mauriciogtec.github.io/post/the-beginning/</link>
      <pubDate>Tue, 07 Aug 2018 21:19:50 -0500</pubDate>
      
      <guid>https://mauriciogtec.github.io/post/the-beginning/</guid>
      <description>

&lt;p&gt;I sincerely hope that this &lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34;&gt;Hugo&lt;/a&gt; website is&amp;ndash;finally&amp;ndash;the beginning of the blog I&amp;rsquo;ve been searching for a long time. Every year or so &amp;lsquo;I feel it&amp;rsquo;s time&amp;rsquo;, but I&amp;rsquo;m am always detained by the boredom of the existing technology: neither I want to use log-in solutions such as &lt;em&gt;Wordpress&lt;/em&gt;, nor I want to spend years writing html code, just to communicate a simple thought.&lt;/p&gt;

&lt;h4 id=&#34;knots-and-the-name-of-this-blog&#34;&gt;Knots and the name of this blog&amp;hellip;&lt;/h4&gt;

&lt;p&gt;Before becoming a PhD student, I spent a some time thinking about geometry and &lt;a href=&#34;https://en.wikipedia.org/wiki/Knot_theory&#34; target=&#34;_blank&#34;&gt;knots&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Knots are closed curves embedded in the 3-dimensional sphere $
\mathbb{S}^3$, which is topologically equivalent to the usual 3-dimensional space $\mathbb{R}^3$, but where there is an unseen point $\{*\}$ where all ends meet. That is, no matter what direction you take, in the infinity you&amp;rsquo;ll arrive to the same place.&lt;/p&gt;

&lt;p&gt;Every knot can be visually represented with a &lt;a href=&#34;https://en.wikipedia.org/wiki/Knot_theory#Knot_diagrams&#34; target=&#34;_blank&#34;&gt;knot diagram&lt;/a&gt;. Below are three diagrams of my favourite knot: &lt;em&gt;the unknot&lt;/em&gt;.&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&#34;https://mauriciogtec.github.io/img/the-beginning/unknot.png&#34; alt=&#34;unknot image&#34; width=&#34;300&#34;&gt; 
 &lt;figcaption&gt;&lt;center&gt;3 knot diagrams of the unknot.&lt;br/&gt;A knot diagram is 2d-projection of a knot.&lt;/center&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Although its formal mathematical definition it&amp;rsquo;s not as simple as one would imagine, intuitively, the unknot is a lasso or circle, which is technically not a knot, but we like to think of it as the simplest knot.&lt;/p&gt;

&lt;p&gt;Surprisingly, recognising the unknot from a diagram is not a simple problem. In fact, it remains a major &lt;a href=&#34;https://en.wikipedia.org/wiki/Unknotting_problem&#34; target=&#34;_blank&#34;&gt;unresolved issue&lt;/a&gt; to determine if the problem admits a polynomial time solution! What I find fascinating about the unknot is that it shows yet again that simplicity is not easy to find.&lt;/p&gt;

&lt;h4 id=&#34;the-unknot-and-science&#34;&gt;The Unknot and Science&lt;/h4&gt;

&lt;p&gt;In Academia, we tend to present the unknot as a line: although we could choose to do our Science in a more honest fashion&amp;ndash;as the circle diagram&amp;ndash;we like to be a little clever. So we draw our unknots as straight lines, and demand from the audience to visualise the point at infinity, so that we look somewhat smarter.&lt;/p&gt;

&lt;p&gt;Real-world, on the other hand, is pretty tangled, and while the underlying truth is simple, finding it is not a polynomial time task. As practitioners, we spent years untangling diagrams, so that we arrive at the unknot in its circle form.&lt;/p&gt;

&lt;p&gt;In this blog I will try to present the unknot as a circle, simple and beautiful as it is.&lt;/p&gt;

&lt;p&gt;Anyways, I have a good feeling about this blog&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
